version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: messagewall-postgres
    environment:
      POSTGRES_DB: messagewall
      POSTGRES_USER: messagewall
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - messagewall-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U messagewall"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: messagewall-redis
    ports:
      - "6379:6379"
    networks:
      - messagewall-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: messagewall-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://messagewall:${DB_PASSWORD:-secure_password_123}@postgres:5432/messagewall
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - UPLOAD_DIR=/app/uploads
      - SOCKET_PORT=3001
    ports:
      - "3000:3000"
      - "3001:3001"
    networks:
      - messagewall-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - upload_data:/app/uploads
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional for local development)
  nginx:
    image: nginx:alpine
    container_name: messagewall-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - upload_data:/var/www/uploads:ro
    networks:
      - messagewall-network
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local
  app_logs:
    driver: local

networks:
  messagewall-network:
    driver: bridge
